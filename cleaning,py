# preprocessing.py
import pandas as pd
import datatable as dtable
import numpy as np

from frac_diff import FractionalDifferentiator

class Preprocessor:
    def __init__(self, frac_d=0.5, frac_thresh=1e-5):
        self.fdiff = FractionalDifferentiator(d=frac_d, thresh=frac_thresh)

    def load_data(self, path, test=False, nrows=None):
        if test:
            df = pd.read_csv(path, nrows=nrows)
        else:
            df = dtable.fread(path).to_pandas()
        
        return df

    def prep_data(self, df):
        """
        Fill NAs, build features, fractionally diff them, build y, etc.
        """
        features = [c for c in df.columns if 'feature' in c]
        df[features] = df[features].fillna(method='ffill').fillna(0)

        # Fractionally differentiate each feature
        for f in features:
            df[f] = self.fdiff.frac_diff(df[f])

        # Create action column
        df['action'] = (
            (df['resp_1'] > 0) & 
            (df['resp_2'] > 0) & 
            (df['resp_3'] > 0) & 
            (df['resp_4'] > 0) & 
            (df['resp']   > 0)
        ).astype('int')

        resp_cols = ['resp','resp_1','resp_2','resp_3','resp_4']
        X = df[features].values
        y = (df[resp_cols] > 0).astype('int').values
        date = df['date'].values
        weight = df['weight'].values
        # sample weights
        sw = np.mean(np.abs(df[resp_cols].values), axis=1)

        return X, y, date, weight, sw, features
